users:
  get:
    tags:
      - Users
    summary: List users
    description: Get a paginated list of users within the tenant
    operationId: listUsers
    parameters:
      - $ref: '../openapi.yaml#/components/parameters/TenantIdHeader'
      - $ref: '../openapi.yaml#/components/parameters/ApiVersionHeader'
      - $ref: '../openapi.yaml#/components/parameters/PaginationLimit'
      - $ref: '../openapi.yaml#/components/parameters/PaginationOffset'
      - name: search
        in: query
        required: false
        schema:
          type: string
        description: Search term to filter users by name or email
      - name: status
        in: query
        required: false
        schema:
          type: string
          enum: [active, inactive, suspended, pending]
        description: Filter users by status
      - name: sortBy
        in: query
        required: false
        schema:
          type: string
          enum: [email, firstName, lastName, status, createdAt]
          default: createdAt
        description: Field to sort the results by
      - name: sortOrder
        in: query
        required: false
        schema:
          type: string
          enum: [asc, desc]
          default: desc
        description: Sort order (ascending or descending)
    responses:
      '200':
        description: List of users
        headers:
          ETag:
            $ref: '../openapi.yaml#/components/headers/ETag'
        content:
          application/json:
            schema:
              $ref: '../schemas/user.yaml#/UserList'
      '400':
        $ref: '../openapi.yaml#/components/responses/ValidationError'
      '401':
        $ref: '../openapi.yaml#/components/responses/Unauthorized'
      '403':
        $ref: '../openapi.yaml#/components/responses/Forbidden'
    security:
      - BearerAuth: []
      - ApiKeyAuth: []
  
  post:
    tags:
      - Users
    summary: Create a user
    description: Create a new user within the tenant
    operationId: createUser
    parameters:
      - $ref: '../openapi.yaml#/components/parameters/TenantIdHeader'
      - $ref: '../openapi.yaml#/components/parameters/ApiVersionHeader'
      - $ref: '../openapi.yaml#/components/parameters/IdempotencyKeyHeader'
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../schemas/user.yaml#/UserCreate'
    responses:
      '201':
        description: User created successfully
        headers:
          ETag:
            $ref: '../openapi.yaml#/components/headers/ETag'
          IdempotencyRequestId:
            $ref: '../openapi.yaml#/components/headers/IdempotencyRequestId'
        content:
          application/json:
            schema:
              $ref: '../schemas/user.yaml#/User'
      '400':
        $ref: '../openapi.yaml#/components/responses/ValidationError'
      '401':
        $ref: '../openapi.yaml#/components/responses/Unauthorized'
      '403':
        $ref: '../openapi.yaml#/components/responses/Forbidden'
      '409':
        description: Conflict - User with this email already exists
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/schemas/Error'
    security:
      - BearerAuth: []
      - ApiKeyAuth: []

usersById:
  get:
    tags:
      - Users
    summary: Get user by ID
    description: Retrieve a specific user by their ID
    operationId: getUserById
    parameters:
      - $ref: '../openapi.yaml#/components/parameters/TenantIdHeader'
      - $ref: '../openapi.yaml#/components/parameters/ApiVersionHeader'
      - $ref: '../openapi.yaml#/components/parameters/UserIdParam'
    responses:
      '200':
        description: User details
        headers:
          ETag:
            $ref: '../openapi.yaml#/components/headers/ETag'
        content:
          application/json:
            schema:
              $ref: '../schemas/user.yaml#/User'
      '401':
        $ref: '../openapi.yaml#/components/responses/Unauthorized'
      '403':
        $ref: '../openapi.yaml#/components/responses/Forbidden'
      '404':
        $ref: '../openapi.yaml#/components/responses/NotFound'
    security:
      - BearerAuth: []
      - ApiKeyAuth: []
  
  put:
    tags:
      - Users
    summary: Update user
    description: Update an existing user's information
    operationId: updateUser
    parameters:
      - $ref: '../openapi.yaml#/components/parameters/TenantIdHeader'
      - $ref: '../openapi.yaml#/components/parameters/ApiVersionHeader'
      - $ref: '../openapi.yaml#/components/parameters/UserIdParam'
      - $ref: '../openapi.yaml#/components/parameters/IfMatchHeader'
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '../schemas/user.yaml#/UserUpdate'
    responses:
      '200':
        description: User updated successfully
        headers:
          ETag:
            $ref: '../openapi.yaml#/components/headers/ETag'
        content:
          application/json:
            schema:
              $ref: '../schemas/user.yaml#/User'
      '400':
        $ref: '../openapi.yaml#/components/responses/ValidationError'
      '401':
        $ref: '../openapi.yaml#/components/responses/Unauthorized'
      '403':
        $ref: '../openapi.yaml#/components/responses/Forbidden'
      '404':
        $ref: '../openapi.yaml#/components/responses/NotFound'
      '409':
        description: Conflict - User with this email already exists
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/schemas/Error'
    security:
      - BearerAuth: []
      - ApiKeyAuth: []
  
  delete:
    tags:
      - Users
    summary: Deactivate user
    description: Deactivates a user by changing their status to 'inactive' and recording the deactivation timestamp
    operationId: deleteUser
    parameters:
      - $ref: '../openapi.yaml#/components/parameters/TenantIdHeader'
      - $ref: '../openapi.yaml#/components/parameters/ApiVersionHeader'
      - $ref: '../openapi.yaml#/components/parameters/UserIdParam'
      - $ref: '../openapi.yaml#/components/parameters/IfMatchHeader'
      - $ref: '../openapi.yaml#/components/parameters/IdempotencyKeyHeader'
    responses:
      '204':
        description: User deleted successfully
      '401':
        $ref: '../openapi.yaml#/components/responses/Unauthorized'
      '403':
        $ref: '../openapi.yaml#/components/responses/Forbidden'
      '404':
        $ref: '../openapi.yaml#/components/responses/NotFound'
    security:
      - BearerAuth: []
      - ApiKeyAuth: []

userRoles:
  get:
    tags:
      - Users
      - Roles
    summary: List user roles
    description: Get all roles assigned to a user
    operationId: getUserRoles
    parameters:
      - $ref: '../openapi.yaml#/components/parameters/TenantIdHeader'
      - $ref: '../openapi.yaml#/components/parameters/ApiVersionHeader'
      - $ref: '../openapi.yaml#/components/parameters/UserIdParam'
    responses:
      '200':
        description: List of user roles
        content:
          application/json:
            schema:
              $ref: '../schemas/role.yaml#/RoleList'
      '401':
        $ref: '../openapi.yaml#/components/responses/Unauthorized'
      '403':
        $ref: '../openapi.yaml#/components/responses/Forbidden'
      '404':
        $ref: '../openapi.yaml#/components/responses/NotFound'
    security:
      - BearerAuth: []
      - ApiKeyAuth: []
  
  post:
    tags:
      - Users
      - Roles
    summary: Assign role to user
    description: Assign a role to a user
    operationId: assignRoleToUser
    parameters:
      - $ref: '../openapi.yaml#/components/parameters/TenantIdHeader'
      - $ref: '../openapi.yaml#/components/parameters/ApiVersionHeader'
      - $ref: '../openapi.yaml#/components/parameters/UserIdParam'
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - roleId
            properties:
              roleId:
                type: string
                format: uuid
                description: ID of the role to assign
    responses:
      '204':
        description: Role assigned successfully
      '400':
        $ref: '../openapi.yaml#/components/responses/ValidationError'
      '401':
        $ref: '../openapi.yaml#/components/responses/Unauthorized'
      '403':
        $ref: '../openapi.yaml#/components/responses/Forbidden'
      '404':
        $ref: '../openapi.yaml#/components/responses/NotFound'
      '409':
        description: Conflict - User already has this role
        content:
          application/json:
            schema:
              $ref: '../openapi.yaml#/components/schemas/Error'
    security:
      - BearerAuth: []
      - ApiKeyAuth: []
  
  delete:
    tags:
      - Users
      - Roles
    summary: Remove role from user
    description: Remove a role from a user
    operationId: removeRoleFromUser
    parameters:
      - $ref: '../openapi.yaml#/components/parameters/TenantIdHeader'
      - $ref: '../openapi.yaml#/components/parameters/ApiVersionHeader'
      - $ref: '../openapi.yaml#/components/parameters/UserIdParam'
      - name: roleId
        in: query
        required: true
        schema:
          type: string
          format: uuid
        description: ID of the role to remove
    responses:
      '204':
        description: Role removed successfully
      '400':
        $ref: '../openapi.yaml#/components/responses/ValidationError'
      '401':
        $ref: '../openapi.yaml#/components/responses/Unauthorized'
      '403':
        $ref: '../openapi.yaml#/components/responses/Forbidden'
      '404':
        $ref: '../openapi.yaml#/components/responses/NotFound'
    security:
      - BearerAuth: []
      - ApiKeyAuth: []
